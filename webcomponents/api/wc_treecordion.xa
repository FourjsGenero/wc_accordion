<?xml version='1.0' encoding='ASCII'?>
<api_class name="wc_treecordion" package="webcomponents.api" top="../../" prev="wc_jqaccordion">
  <TYPE name="tTree" type="RECORD">
    <RECORD>
      <member name="id" type="STRING"/>
      <member name="field" type="STRING"/>
      <member name="title" type="STRING"/>
      <member name="narrative" type="STRING"/>
      <member name="imagePath" type="STRING"/>
      <member name="iconOpen" type="STRING"/>
      <member name="iconClosed" type="STRING"/>
      <member name="doc" type="om.DomDocument"/>
      <member name="dom" type="om.DomNode"/>
      <member name="Id_New" type="FUNCTION (p_id:STRING) RETURNS STRING"/>
    </RECORD>
    <function receiverType="tTree" name="Item_Update">
      <api_synopsis> Update attributes of an Item</api_synopsis>
      <api_returnType>om.DomNode</api_returnType>
      <return>DOM node of added child</return>
      <api_usage>
        <pre>n DOM node of added child</pre>
      </api_usage>
      <api_usage> define r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem, p_id integer
 ...
 call r_tree.Item_Update(r_item)</api_usage>
      <api_param name="r_item" type="wc_treecordion.tItem" type_name="tItem">Item record</api_param>
    </function>
    <function receiverType="tTree" name="Item_Get">
      <api_synopsis> Get an Item by ID</api_synopsis>
      <api_returnType>tItem</api_returnType>
      <return>Record of the item node</return>
      <api_usage>
        <pre> define  r_tree wc_treecordion.tTree,r_iem wc_treecordion.tItem, p_id integer
 let r_item = r_tree.Item_Get(p_id)</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Item ID</api_param>
      <RETURNS type="wc_treecordion.tItem" type_name="tItem"/>
    </function>
    <function receiverType="tTree" name="Item_Delete">
      <api_synopsis> Delete an Item and its descendents by ID</api_synopsis>
      <api_usage>
        <pre> define  r_tree wc_treecordion.tTreeCordion, r_item wc_treecordion.tItem, p_currentID integer
 let p_currentID = r_tree.Item_Delete(r_item.id)</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Item ID</api_param>
      <RETURNS type="STRING"/>
    </function>
    <function receiverType="tTree" name="Item_Attach">
      <api_synopsis> Add a child Item to a parent Item</api_synopsis>
      <api_returnType>string</api_returnType>
      <return>ID of node added</return>
      <api_usage>
        <pre> define  r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem, p_parentId, p_newID integer
 ...
 let p_newID = r_tree.Item_Add(p_parentId, r_item)</pre>
      </api_usage>
      <api_param name="p_parentID" type="STRING">Parent Item ID</api_param>
      <api_param name="r_item" type="wc_treecordion.tItem" type_name="tItem">Item record</api_param>
      <RETURNS type="STRING"/>
    </function>
    <function receiverType="tTree" name="Item_Add">
      <api_synopsis> Add a child Item to a parent Item</api_synopsis>
      <api_returnType>string</api_returnType>
      <return>ID of node added</return>
      <api_usage>
        <pre> define  r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem, p_parentId, p_newID integer
 ...
 let p_newID = r_tree.Item_Add(p_parentId, p_id, "", "Section A", "ActivityMonitor-16.png", "", "", "closed", "This is content for &lt;B&gt;A&lt;/B&gt; section")</pre>
      </api_usage>
      <api_param name="p_parentID" type="STRING">Parent Item ID</api_param>
      <api_param name="p_id" type="STRING">Item ID</api_param>
      <api_param name="p_key" type="STRING">Alternate key</api_param>
      <api_param name="p_text" type="STRING">Text attribute</api_param>
      <api_param name="p_image" type="STRING">Image attribute</api_param>
      <api_param name="p_iconOpen" type="STRING">Icon for Open state</api_param>
      <api_param name="p_iconClosed" type="STRING">Icon for Closed state</api_param>
      <api_param name="p_state" type="STRING">Initial state of node (NOT CURRENTLY USED)</api_param>
      <api_param name="p_content" type="STRING">Content for this node</api_param>
      <RETURNS type="STRING"/>
    </function>
    <function receiverType="tTree" name="XML">
      <api_synopsis> Get XML string from document</api_synopsis>
      <api_returnType>string
 return XML string of TreeCordion's DOM tree</api_returnType>
      <api_usage>
        <pre> define p_xml string,
   r_tree wc_treecordion.tTree
 let p_xml = r_tree.XML()</pre>
      </api_usage>
      <RETURNS type="STRING"/>
    </function>
    <function receiverType="tTree" name="Node">
      <api_synopsis> Returns the om.DomNode by ID</api_synopsis>
      <api_returnType>om.DomNode</api_returnType>
      <return>DOM node of added child</return>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem, o_node om.DomNode
 let o_node = r_tree.Node(r_item.id)</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Item ID</api_param>
      <RETURNS type="om.DomNode"/>
    </function>
    <function receiverType="tTree" name="Collapse">
      <api_synopsis> Collapse node, default is root node (all)</api_synopsis>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem
 call r_tree.Collapse(r_item.id)</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Node ID</api_param>
    </function>
    <function receiverType="tTree" name="Expand">
      <api_synopsis> Expand node, default is root node (all)</api_synopsis>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem
 call r_tree.Expand(r_item.id)</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Node ID</api_param>
    </function>
    <function receiverType="tTree" name="IsVisible">
      <api_synopsis> Is contents of node visible?</api_synopsis>
      <api_returnType>boolean</api_returnType>
      <return>TRUE if visible, else FALSE</return>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem
 if r_tree.IsVisible(r_item.id)
 then
   message "contents of item ", r_item.id, " is visible"
 end if</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Node ID</api_param>
      <RETURNS type="BOOLEAN"/>
    </function>
    <function receiverType="tTree" name="Show">
      <api_synopsis> Show or hide a node</api_synopsis>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem
 call r_tree.Show(r_item.id, TRUE)</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Node ID</api_param>
      <api_param name="p_show" type="BOOLEAN">TRUE to show, else hide</api_param>
    </function>
    <function receiverType="tTree" name="Init">
      <api_synopsis> Initialize contents of widget</api_synopsis>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree
 let r_tree.title = "Title"
 ...
 before input
   call r_tree.Init()</pre>
      </api_usage>
    </function>
    <function receiverType="tTree" name="Set">
      <api_synopsis> Set tTree from parameters</api_synopsis>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree
 call r_tree.Set(r_tree.id, "999", "", "Section 999", "Memory-16.png", "", "", "closed", "This is an new for &lt;B&gt;999&lt;/B&gt; section")</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Currently selected node ID</api_param>
      <api_param name="p_field" type="STRING">string          Form field name</api_param>
      <api_param name="p_title" type="STRING">string          Title text</api_param>
      <api_param name="p_narrative" type="STRING">string      Narrative or description</api_param>
      <api_param name="p_imagePath" type="STRING">string      Local file or URL image prefix</api_param>
      <api_param name="p_iconOpen" type="STRING">string       Default ui-icon for open state</api_param>
      <api_param name="p_iconClosed" type="STRING">string     Default ui-icon for closed state</api_param>
      <api_param name="po_doc" type="om.DomDocument">om.DomDocument   DOM document</api_param>
      <api_param name="po_dom" type="om.DomNode">om.DomNode       Root DomNode of DOM document</api_param>
      <api_param name="pf_func" type="FUNCTION (p_id:STRING) RETURNS STRING">Refers to function(p_id string) returns string</api_param>
    </function>
    <function receiverType="tTree" name="Clear">
      <api_synopsis> Clear record: reset attributes on root node, and delete all children</api_synopsis>
      <api_usage>
        <pre> define r_tree wc_treecordion.tTree
 call r_tree.Clear()</pre>
      </api_usage>
    </function>
  </TYPE>
  <TYPE name="tItem" type="RECORD">
    <RECORD>
      <member name="id" type="STRING"/>
      <member name="key" type="STRING"/>
      <member name="text" type="STRING"/>
      <member name="image" type="STRING"/>
      <member name="iconOpen" type="STRING"/>
      <member name="iconClosed" type="STRING"/>
      <member name="state" type="STRING"/>
      <member name="content" type="STRING"/>
    </RECORD>
    <function receiverType="tItem" name="Update">
      <api_synopsis> Update node attributes from Item</api_synopsis>
      <api_usage>
        <pre> define  o_parent, o_child om.DomNode, r_item wc_treecordion.tItem
 let o_child = o_parent.createChild("Node")
 ...
 call r_item.Update(o_child)</pre>
      </api_usage>
      <api_param name="o_node" type="om.DomNode">DOM node</api_param>
    </function>
    <function receiverType="tItem" name="Attach">
      <api_synopsis> Attach Item as a child node to a parent node</api_synopsis>
      <api_returnType>om.DomNode</api_returnType>
      <return>DOM node of added child</return>
      <api_usage>
        <pre> define a_nodes dynamic array of om.DomNode, r_item wc_treecordion.tItem
 let a_nodes[p_depth] = r_item.Attach(a_nodes[p_depth-1])</pre>
      </api_usage>
      <api_param name="o_parent" type="om.DomNode">Parent DOM node</api_param>
      <RETURNS type="om.DomNode"/>
    </function>
    <function receiverType="tItem" name="Set">
      <api_synopsis> Set Item from parameters</api_synopsis>
      <api_usage>
        <pre> define   r_item wc_treecordion.tItem
 call r_item.Set(r_tree.id, "999", "", "Section 999", "Memory-16.png", "", "", "closed", "This is an new for &lt;B&gt;999&lt;/B&gt; section")</pre>
      </api_usage>
      <api_param name="p_id" type="STRING">Item ID</api_param>
      <api_param name="p_key" type="STRING">Alternate key</api_param>
      <api_param name="p_text" type="STRING">Text attribute</api_param>
      <api_param name="p_image" type="STRING">Image attribute</api_param>
      <api_param name="p_iconOpen" type="STRING">Icon for Open state</api_param>
      <api_param name="p_iconClosed" type="STRING">Icon for Closed state</api_param>
      <api_param name="p_state" type="STRING">Initial state of node (NOT CURRENTLY USED)</api_param>
      <api_param name="p_content" type="STRING">Content for this node</api_param>
    </function>
  </TYPE>
  <function name="Init">
    <api_synopsis> Initialize the module</api_synopsis>
    <api_usage>
      <pre> call wc_treecordion.Init()</pre>
    </api_usage>
  </function>
  <function name="Create">
    <api_synopsis> Creates a new instance of TreeCordion</api_synopsis>
    <api_returnType>tTreeCordion</api_returnType>
    <return>TreeCordion record</return>
    <api_usage>
      <pre> define r_tree wc_treecordion.tTree
 let r_tree = wc_treecordion.Create("formonly.p_treecordion")</pre>
    </api_usage>
    <api_param name="p_field" type="STRING">Form name of the field</api_param>
    <RETURNS type="wc_treecordion.tTree" type_name="tTree"/>
  </function>
  <function name="Node_Add">
    <api_synopsis> Attach Item as a child node to a parent node</api_synopsis>
    <api_returnType>om.DomNode</api_returnType>
    <return>DOM node of added child</return>
    <api_usage>
      <pre> define a_nodes dynamic array of om.DomNode, r_tree wc_treecordion.tTree, r_item wc_treecordion.tItem
 let a_nodes[p_depth] = wc_treecordion.Node_Add(a_nodes[p_depth-1], r_tree.id, "999", "", "Section 999", "Memory-16.png", "", "", "closed", "This is an new for &lt;B&gt;999&lt;/B&gt; section")</pre>
    </api_usage>
    <api_param name="o_parent" type="om.DomNode">Parent DOM node</api_param>
    <api_param name="p_id" type="STRING">Item ID</api_param>
    <api_param name="p_key" type="STRING">Alternate key</api_param>
    <api_param name="p_text" type="STRING">Text attribute</api_param>
    <api_param name="p_image" type="STRING">Image attribute</api_param>
    <api_param name="p_iconOpen" type="STRING">Icon for Open state</api_param>
    <api_param name="p_iconClosed" type="STRING">Icon for Closed state</api_param>
    <api_param name="p_state" type="STRING">State of node</api_param>
    <api_param name="p_content" type="STRING">Content for this node</api_param>
    <RETURNS type="om.DomNode"/>
  </function>
</api_class>
